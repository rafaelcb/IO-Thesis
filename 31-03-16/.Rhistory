install.packages("ggplot2")
install.packages("rmarkdown")
install.packages("digest")
install.packages("statnet")
library(statnet)
data("florentine")
summary(flomarriage~edges)
plot(flomarriage)
model1<-ergm(flomarriage~edges)
summary(model1)
e**1.6094
exp(1.6094)
exp(1.6094) -> x
x/(1+x)
ln(10)
log(10)
exp(log(10))
x
x
x<-exp(-1.6094)
x/(1+x)
model2 <- ergm(flomarriage ∼ edges + triangles)
model2 <- ergm(flomarriage ∼ edges + triangles)
summary(model2)
des(model2)
str(model2)
model2$estimate
model2$coef
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
tab
median(tab[,2],na.rm=TRUE)
x<-rnorm(1000)
plot(x,1:1000)
hist(x)
sort(x)
plot(sort(x))
plot(table(x))
table(x)
z<-table(x)
z<-table(x)[1:2,]
z<-table(x)[1,1]
z<-table(x)[1]
z
z<-names(table(x))
z
z<-as.numeric(names(table(x)))
z
y<-table(x)
plot(z,y)
plot(y)
plot(y,z)
y
plot(y)
line(y)
plot(z,y)
plot(y,z)
plot(y,t(z))
t(z)
z
y
y<-y[]
y<-values(y)
y<-as.numeric(y)
y
y<-as.numeric(table(x))
y
hist(z)
density(x)
density(z)
plot(density(z))
x<-seq(-3,3,0.01)
x
plot(x,pnorm(x))
plot(x,dnorm(x))
plot(x,dnorm(x),type="l")
plot(x,dnorm(x),type="l",col="blue")
plot(x,dnorm(x),type="l",col="skyblue")
plot(x,dnorm(x),type="l",col="blue")
plot(x,dnorm(x),type="l",col="blue",lwd=2)
plot(x,dnorm(x),type="l",col="blue",lwd=3)
plot(x,dnorm(x),type="l",col="blue",lwd=6)
plot(x,dnorm(x),type="l",col="blue",lwd=3)
plot(x,dnorm(x),type="l",col="blue",lwd=3,xlab=None)
plot(x,dnorm(x),type="l",col="blue",lwd=3,xlab="")
plot(x,dnorm(x),type="l",col="blue",lwd=3,xlab="",ylab="")
plot(x,dnorm(x),type="l",col="blue",lwd=3,xlab="",ylab="")
? plot
plot(x,dnorm(x),type="l",col="blue",lwd=3,xlab="",ylab="",bty="l")
plot(x,dnorm(x),type="l",col="blue",lwd=3,xlab=NULL,ylab=NULL,bty="l")
plot(x,dnorm(x),type="l",col="blue",lwd=3,xlab=NA,ylab=NULL,bty="l")
plot(x,dnorm(x),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
plot(x,dchi(x),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
plot(x,dchisq(x),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
plot(x,dchisq(x,2),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
plot(x,dchisq(x,10),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
x<-seq(-40,40,0.01)
plot(x,dchisq(x,10),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
plot(x,dchisq(x,100),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
plot(x,dchisq(x,40),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
x<-seq(-100,100,0.01)
plot(x,dchisq(x,40),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
plot(x,dchisq(x,50),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
plot(x,dpoisson(x,50),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
plot(x,dpois(x,50),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
plot(x,dpois(x,1),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
x<-seq(0,100,0.01)
plot(x,dpois(x,25),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
plot(x,dpois(x,60),type="l",col="blue",lwd=3,xlab=NA,ylab=NA,bty="l")
x<-1:2000
y <- 50 + 1000*x + rnorm(1,0,250)
plot(x,y)
z<-sample(cbind(x,y))
z<-sample(cbind(x,y),400)
z
z<-sample([x,y],400)
z<-sample(c=[x,y],400)
c=[x,y]
c=cbind[x,y]
cbind(x,y)
z<-smpl(cbind(x,y),100)
z<-sample(cbind(x,y),100)
z<-sample(2000,100)
plot(x[z],y[z])
x<-rnorm(2000,550,100)
y <- 50 + 1000*x + rnorm(1,0,250)
plot(x,y)
y <- 50 + 1000*x + rnorm(1,0,500)
plot(x,y)
y <- 50 + 1000*x + rnorm(1,0,1000)
plot(x,y)
y <- 50 + 10*x + rnorm(1,0,1000)
plot(x,y)
y <- 50 + 10*x + rnorm(1,0,100000)
plot(x,y)
y <- 50 + 10*x + rnorm(2000,0,100000)
plot(x,y)
y <- 50 + 10*x + rnorm(2000,0,10)
plot(x,y)
y <- 50 + 10*x + rnorm(2000,0,100)
plot(x,y)
y <- 50 + 10*x + rnorm(2000,0,150)
plot(x,y)
y <- 50 + 10*x + rnorm(2000,0,350)
plot(x,y)
plot(x[z],y[z])
lm(y[z]~x[z])
tab <- matrix(nrow = 50, ncol = 2)
for(i in 1:50){
model <- ergm(flomarriage ~ edges + triangles)
tab[i,] <-model$coef
}
fun <-function(x){
z<- 0.5 * x *(x - 1)
return z
}
}
fun <-function(x){
z<- 0.5 * x *(x - 1)
return z
}
fun <-function(x){
z<- 0.5 * x *(x - 1)
return z}
fun <- function(x){
z <- 0.5 * x *(x - 1)
return(z)}
fun(100)
fun(2000)
fun(10)
fun(2)
fun(0)
fun(3)
fun(5)
fun(4)
z <- 0.5 * x *(x + 1)
fun <- function(x){
z <- 0.5 * x *(x + 1)
return(z)}
fun(4)
fun(100)
fun(14)
fun(102)
fun(100000000)
fun2 <- function(x){
if(temp == NULL){temp <- 1}
if(x != 1){temp <- fun2( x - 1)}
return(temp)
}
fun2(3)
wd()
sw()
sd()
ws()
sw()
get.wd()
set.wd()
? working directory
getwd()
setwd("~/UvA - MSc Economics/Thesis/HTMLs")
getwd)=
getwd()
setwd("~/11-04-16")
setwd("~/11-04- 16")
setwd("~/11-04- 16")
setwd("~/11-04-16")
?getwd
list.files()
setwd("~/11-04-16")
setwd("~/10-04-16")
setwd("~/31-03-16")
setwd("~\31-03-16")
setwd("~/31-03-16")
getwd()
setwd("C:/Users/Castrillo/Documents/UvA - MSc Economics/Thesis/HTMLs/31-03-16")
install.packages("XML")
library(XML)
ata <- xmlParse("amsterdam_london_2016-04-01_31-03-16")
ata <- xmlParse("amsterdam_london_2016-04-01_31-03-16.txt")
data <- scan("amsterdam_london_2016-04-01_31-03-16.txt")
data <- read.table("amsterdam_london_2016-04-01_31-03-16.txt")
data <- read.table(file = "amsterdam_london_2016-04-01_31-03-16.txt")
doc.html = htmlTreeParse('amsterdam_london_2016-04-01_31-03-16.txt',
useInternal = TRUE)
doc.html
x <- xpathSApply(pagetree, "//*/table", xmlValue)
x <- unlist(strsplit(x, "\n"))
x <- xpathSApply(doc.html, "//*/table", xmlValue)
x <- unlist(strsplit(x, "\n"))
x
x <- xpathSApply(pagetree, "//*/table", xmlValue)
x <- xpathSApply(doc.html, "//*/table", xmlValue)
x
getNodeSet(doc.html)
doc.html = htmlTreeParse('amsterdam_london_2016-04-01_31-03-16.txt',
useInternal = TRUE)
?xpathApply
x <- xpathSApply(doc.html, "row", xmlValue)
x
x <- xpathSApply(doc.html, "class", xmlValue)
x = xmlParse(doc.html)
? getNodeSet
? getNodeSet
els = getNodeSet(doc.html, "/doc.html//a[@status]")
els
doc = xmlParse(system.file("exampleData", "tagnames.xml", package = "XML"))
els = getNodeSet(doc, "/doc//a[@status]")
sapply(els, function(el) xmlGetAttr(el, "status"))
doc
els
els = getNodeSet(doc.html, "/doc.html//c[@row]")
els = getNodeSet(doc.html, "/doc//c[@row]")
els = getNodeSet(doc.html, "/doc//class[@row]")
els = getNodeSet(doc.html, '//*[@class = "row"]')
els
els[1]
els[2]
els = getNodeSet(doc.html, '//*[@class = "search-result-summary clearfix"]')
els
sapply(els, function(el) xmlGetAttr(el, "field-price"))
sapply(els, function(el) xmlGetClass(el, "field-price"))
xmlelementsbytagname(els,"field-price")
xmlElementsByTagName(els,"field-price")
xmlElementsByTagName(doc.html,"field-price")
els
xmlToList(doc.html)
els
els[1]
els = getNodeSet(els[1], '//*[@class = "price-"]')
xmlElementsByTagName(doc.html,"field-price")
els = getNodeSet(els[1], '//*[@class = "field-price"]')
doc = xmlParse(system.file("exampleData", "tagnames.xml", package = "XML"))
els = getNodeSet(doc, "/doc//a[@status]")
sapply(els, function(el) xmlGetAttr(el, "status"))
doc
?xmlGetAttr
els = getNodeSet(doc.html, '//*[@class = "field-price"]')
els = getNodeSet(doc.html, '//*[@class = "col-sm-18 col-md-16 col-price"]',namespaces)
els = getNodeSet(doc.html, '//*[@class = "col-sm-18 col-md-16 col-price"]')
els
els = xpathSApply(doc.html, '//*[@class = "col-sm-18 col-md-16 col-price"]',xmlValue)
els
els = getNodeSet(doc.html, '//*[@class = "search-result-summary clearfix"]')
els
doc = xmlParse(system.file("exampleData", "tagnames.xml", package = "XML"))
els = getNodeSet(doc, "/doc//a[@status]")
sapply(els, function(el) xmlValue(el, "field-Time"))
doc = xmlParse(system.file("exampleData", "tagnames.xml", package = "XML"))
els = getNodeSet(doc, "/doc//a[@status]")
sapply(els, function(el) xmlValue(el, "field-time"))
xmlRoot(doc.html)
top = xmlRoot(doc.html)
xlmName(top)
xmlName(top)
names(top)
els = getNodeSet(doc.html, '//*[@class = "search-result-summary clearfix"]')
